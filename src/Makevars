## Use the R_HOME indirection to support installations of multiple R version
#DO NOT USE CPPFLAGS and LDFLAGS, they got overwrite by R CMD 

## As an alternative, one can also add this code in a file 'configure'
##
##    PKG_LIBS=`${R_HOME}/bin/Rscript -e "Rcpp:::LdFlags()"`
## 
##    sed -e "s|@PKG_LIBS@|${PKG_LIBS}|" \
##        src/Makevars.in > src/Makevars
## 
## which together with the following file 'src/Makevars.in'
##
##    PKG_LIBS = @PKG_LIBS@
##
## can be used to create src/Makevars dynamically. This scheme is more
## powerful and can be expanded to also check for and link with other
## libraries.  It should be complemented by a file 'cleanup'
##
##    rm src/Makevars
##
## which removes the autogenerated file src/Makevars. 
##
## Of course, autoconf can also be used to write configure files. This is
## done by a number of packages, but recommended only for more advanced users
## comfortable with autoconf and its related tools.

CC = gcc
CXX = g++
DFLAGS = -D_FILE_OFFSET_BITS=64 -D_USE_KNETFILE
BAMOBJ_0 = \
  bgzf.o kstring.o bam_aux.o bam.o bam_import.o sam.o bam_index.o	\
  bam_pileup.o bam_lpileup.o bam_md.o razf.o faidx.o \
  knetfile.o bam_sort.o sam_header.o bam_reheader.o kprobaln.o
BAMOBJ=$(BAMOBJ_0:%=samtools/%)
BWAOBJ_0 = utils.o kthread.o kstring.o ksw.o bwt.o bntseq.o bwa.o bwamem.o bwamem_pair.o bwamem_extra.o
BWAOBJ=$(BWAOBJ_0:%=bwa/%)

RCPP_CXXFLAGS = $(shell $(R_HOME)/bin$(R_ARCH_BIN)/Rscript -e "Rcpp:::CxxFlags()" )
ARMA_CXXFLAGS = $(shell $(R_HOME)/bin$(R_ARCH_BIN)/Rscript -e "RcppArmadillo:::CxxFlags()" )
RCPP_LDFLAGS = $(shell $(R_HOME)/bin$(R_ARCH_BIN)/Rscript -e "Rcpp:::LdFlags()" )
#ARMA_LDFLAGS = $(shell $(R_HOME)/bin$(R_ARCH_BIN)/Rscript -e "RcppArmadillo:::LdFlags()" ) #ARMA_LDFLAGS is not needed

BOOST_LIBS= $(BOOST_LIBRARY_DIR)
BOOST_INCLUDE= $(BOOST_INCLUDE_DIR)
BOOST_REGEX_LIB= $(shell $(R_HOME)/bin$(R_ARCH_BIN)/Rscript -e "if(length(Sys.glob(file.path(Sys.getenv('BOOST_LIBRARY_DIR'),'libboost_regex-mt.*')))>0) { cat('boost_regex-mt') } else { cat('boost_regex') }" )
#b2 install --prefix=$HOME/usr threading=multi --layout=tagged

PKG_CXXFLAGS += -std=c++11 -fopenmp -I$(BOOST_INCLUDE_DIR) $(RCPP_CXXFLAGS) $(ARMA_CXXFLAGS)
PKG_LIBS += -L$(BOOST_LIBS) $(RCPP_LDFLAGS) -l$(BOOST_REGEX_LIB) -fopenmp -lgomp 
PKG_CFLAGS += $(DFLAGS) -I./samtools -I./bwa
PKG_LIBS += "${R_PACKAGE_DIR}/usrlib${R_ARCH}/libbam.a" "${R_PACKAGE_DIR}/usrlib${R_ARCH}/libbwa.a"
PKG_LIBS += -lz

.PHONY: all libs clean

all: $(SHLIB)

$(SHLIB): libs

libs: libbam.a libbwa.a
	mkdir -p "${R_PACKAGE_DIR}/usrlib${R_ARCH}"
	mkdir -p "${R_PACKAGE_DIR}/include/samtools"
	cp samtools/*.h "${R_PACKAGE_DIR}/include/samtools/"
	cp libbam.a "${R_PACKAGE_DIR}/usrlib${R_ARCH}"
	mkdir -p "${R_PACKAGE_DIR}/include/bwa"
	cp bwa/*.h "${R_PACKAGE_DIR}/include/bwa/"
	cp libbwa.a "${R_PACKAGE_DIR}/usrlib${R_ARCH}"

libbam.a: $(BAMOBJ)
	$(AR) -crus $@ $(BAMOBJ)

libbwa.a: $(BWAOBJ)
	$(AR) -crus $@ $(BWAOBJ)

clean:
	rm -f $(BAMOBJ) $(BWAOBJ) *.a *.o *.so *.dll
